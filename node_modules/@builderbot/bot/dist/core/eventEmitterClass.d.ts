import type { TContext } from '../types';
export type HostEventTypes = {
    send_message: [arg1: TContext & {
        from: string;
        answer: string | string[];
        respMessage: any;
    }];
    notice: [arg1: {
        title: string;
        instructions: string[];
    }];
};
export declare class EventEmitterClass<TEvents extends Record<string, any>> {
    private emitter;
    emit<TEventName extends keyof TEvents & string>(eventName: TEventName, ...eventArg: TEvents[TEventName]): void;
    on<TEventName extends keyof TEvents & string>(eventName: TEventName, handler: (...eventArg: TEvents[TEventName]) => void): void;
    off<TEventName extends keyof TEvents & string>(eventName: TEventName, handler: (...eventArg: TEvents[TEventName]) => void): void;
}
//# sourceMappingURL=eventEmitterClass.d.ts.map