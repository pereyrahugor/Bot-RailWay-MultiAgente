import { CoreClass } from './core/coreClass';
import { EventEmitterClass } from './core/eventEmitterClass';
import { MemoryDB } from './db';
import { LIST_ALL as EVENTS } from './io/events';
import FlowClass from './io/flowClass';
import { addAnswer } from './io/methods/addAnswer';
import { addKeyword } from './io/methods/addKeyword';
import { ProviderClass } from './provider/interface/provider';
import { TestProvider } from './provider/providerMock';
import type { GeneralArgs, TFlow } from './types';
import * as utils from './utils';
/**
 * Crear instancia de clase Bot
 */
declare const createBot: <P extends ProviderClass = any, D extends MemoryDB = any>({ flow, database, provider }: {
    flow: FlowClass;
    database: D;
    provider: P;
}, args?: Omit<GeneralArgs, "listEvents">) => Promise<CoreClass<P, D>>;
/**
 * Crear instancia de clase Io (Flow)
 */
declare const createFlow: (args: TFlow[]) => FlowClass;
/**
 * Crear instancia de clase Provider
 * Depdendiendo del Provider puedes pasar argumentos
 * Ver Documentacion
 */
declare const createProvider: <T = ProviderClass, K = typeof ProviderClass.prototype.globalVendorArgs>(providerClass: new (args: K) => T, args?: K) => T;
declare const TestTool: {
    TestProvider: typeof TestProvider;
    TestDB: typeof MemoryDB;
};
export { createBot, createFlow, createProvider, addKeyword, addAnswer, ProviderClass, EventEmitterClass, CoreClass, EVENTS, MemoryDB, TestTool, utils, };
//# sourceMappingURL=index.d.ts.map